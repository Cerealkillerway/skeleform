   ___________          .__          _____
  /   _____/  | __ ____ |  |   _____/ ____\___________  _____
  \_____  \|  |/ // __ \|  | _/ __ \   __\/  _ \_  __ \/     \
  /        \    <\  ___/|  |_\  ___/|  | (  <_> )  | \/  Y Y  \
 /_______  /__|_ \\___  >____/\___  >__|  \____/|__|  |__|_|  /
         \/     \/    \/          \/                        \/

===================================================================
===================================================================
|||                                                             |||
|||                      SKELEFORM GUIDE                        |||
|||                                                             |||
===================================================================
===================================================================
Skeleform is an advanced form creation tool that enables you to instantly create complex forms with different input types and validation.
It is built on top of Skeletor and MaterializeCSS.
If you have any problem using it, please have a look to the "troubleshooting" section at the bottom.

===================================================================
|||                     IMPORTANT NOTES                         |||
===================================================================
Please remember the followings:

** In this version i18n fields MUST be on the top level (i18n nested fields are NOT supported);


===================================================================
|||                      SCHEMA OPTIONS                         |||
===================================================================
__collection   -> [string] (required) name of collection that is manipulated by this form;
__toolbar      -> [object] (optional)
                    template      -> [string] (optional) name of alternative template to use as a toolbar;
                    containerId   -> [string] (optional/available only if "template"option is used) id of DOM element to place the toolbar in;
                    extrasCreate  -> [string] (optional) template for extra buttons to be added to standard create toolbar;
                    extrasUpdate  -> [string] (optional) template for extra buttons to be added to standard update toolbar;

__paths        -> [object] (optional) dictionary of paths to be used in different situations:
                    undoPath          -> [string, object] (required) specify the path to be used for cancel button;
                                         the string is the path definition (can contain ":" params), and the object
                                         is the params dictionary (NOT optional, pass empty object if no params are needed);
                                         the string 'this' used as a value in params object means that the value must be taken
                                         from skeleform's gathered data object.
                                         For itemLang param, the value 'auto' means that it is taken from the current route's URL;
                    redirectOnCreate  -> [string, object] (optional) specify the path to be used as a redirect after a succesful create;
                                         the string is the path definition (can contain ":" params), and the object
                                         is the params dictionary (NOT optional, pass empty object if no params are needed);
                                         the string 'this' used as a value in params object means that the value must be taken
                                         from skeleform's gathered data object.
                                         For itemLang param, the value 'auto' means that it is taken from the current route's URL;
                                         (default behaviour: clean the form and be ready for a new document)
                    redirectOnUpdate  -> [string, Object] (optional) specify the path to be used as a redirect after a succesful update;
                                         the string is the path definition (can contain ":" params), and the object
                                         is the params dictionary (NOT optional, pass empty object if no params are needed);
                                         the string 'this' used as a value in params object means that the value must be taken
                                         from skeleform's gathered data object.
                                         For itemLang param, the value 'auto' means that it is taken from the current route's URL;
                                         (default behaviour: stay on the same page)
__options:
    loadingModal -> if true use a loading modal while performing skeleform operations [boolean]
    tracked -> if true save to each document data about user and timestamp of creation and last update [boolean]

__listView: (optional) skelelist options
    style -> type of list to create [table]
    classes -> CSS classes to assign to the listView
    itemFields -> list of fields to use in the listView [array of strings]
    itemActions -> list of actions to use for each document in the list [delete]
    detailLink -> an object that defines the link for detail view
               -> basePath [string] the path definition for the link
               -> params [array of strings] the names of params in the path
    sourceFields -> a dictionary of fields used in list view that are in truth external link to other documents;
                    each element is an object with these properties:
                    -> mapTo [string] name of the attribute in the external document to use instead of current value
                    -> collection [string] name of collection where to find the external document


fields: [Array of Objects] each object in this array represents a field that can have the following properties:


===================================================================
|||                  SCHEMA FIELDS OPTIONS                      |||
===================================================================
__listView -> (optional) options for the field in the list view
           -> stripHTML [boolean] set to true to strip out HTML from the value (default false)
           -> truncate [integer] number of characters to keep (default all)

Required fields:
----------------
name    -> [String] (required) the name of the field (MUST be an UNIQUE identifier)
output  -> [String] (required) form element ["input", "editor", "select"]

    Field specific options:
    ------------------------------
    staticTitle: mini -> [boolean] use <h3> tag instead of <h4>


    input: icon          -> [string] (optional) materialize's icon class;
           renderAs      -> [string] (optional) type of input field to render (password, text); default to "text";
                            when using the "password" option, the field is not gathered for submit if left empty;
                            IMPORTANT: when using "password" option don't set max length, since the value is hashed with sha256 (becomes longer);
           shadowConfirm -> [boolean] (optional) activates a re-type input field that invalidates if its value is not equal;
                            (ex.: to be used with renderAs: "password"); default to false;
           formatAs      -> [string] (optional) specific format to use for the field's data (currency, float, undefined); default to undefined;
           autoRange     -> [boolean] (optional) autoselect inner text when reached the max length defined for this field (default false);
           charCounter   -> [number] (optional) enables the materializeCSS's character counter plugin;
                            Important: the character counter does not set the "maxlength" property on the input (this is done by using validation -> max);


    checkBox: renderAs   -> [string] (optional) type of boolean selector to display ("checkbox", "switch"); default to "checkbox";
              labels     -> [object] (optional) can contain 2 (optionals) keys (on, off) containing the two strings to be used as i18n strings
                            for the respectives switch states; if it's not provided, the default "yes_lbl" and "no_lbl" are used;


    editor: toolbar  -> [string] (optional) specifies the toolbar to use ("minimal", "default", "full");
            image    -> [object] (optional) an object that defines parameters to be used while inserting images:
                            quality -> [float 0 ~ 1] the quality of jpeg created;
                            width   -> [integer];
                            height  -> [integer];
            video    -> [object] (optional) an object that defines parameters to be used while embeeding videos:
                            width   -> [integer];
                            height  -> [integer];


    select: source      -> [array] (required) data source for options; must be an array of objects with name and value fields (and optionally icon);
            icons       -> [boolean] (optional) used to assign "icons" class for icons on options dropdown;
            allowBlank  -> [boolean] (optional) allow select none (default undefined option is created automatically);


    imageUpload: can have options (image, thumb) that decides what will be created and uploaded [object]; both are objects with these properties:
                        -> [float 0 ~ 1] the quality of jpeg created
                        -> width [integer]
                        -> height [integer]


    datePicker: icon           -> [string] (optional) materialize's icon class;
                pickerOptions  -> [object] (optional) dictionary of init options to override when starting the pickadate plugin
                                  (more info at http://amsul.ca/pickadate.js/date/);


    timePicker: icon           -> [string] (optional) materialize's icon class;
                pickerOptions  -> [object] (optional) dictionary of init options to override when starting the pickatime plugin;
                                  (more info at http://amsul.ca/pickadate.js/time);

    clockPicker: icon           -> [string] (optional) materialize's icon class;
                 pickerOptions  -> [object] (optional) dictionary of init options to override when starting the clockpicker plugin;
                                   (more info at https://github.com/weareoutman/clockpicker and https://github.com/chingyawhao/materialize-clockpicker);



COMMON OPTIONS FOR ALL KIND OF FIELDS:
--------------------------------------
i18n        -> [boolean] (optional) specify that the field will be nested under "currentLang" object; (default true);
size        -> [string] (optional) materialize's grid system classes; default to "s12 m6";
callbacks   -> [object] (optional) dictionary of callbacks;
                -> onChange(value)  : [function] (optional) a callback to be performed when the value of the field changes;
                   it receives the field's value as parameter;

validation  -> [object] set the validation rules:
                -> type: [string] (optional) validation match ("string", "number", "email", "url", "date", "time");
                   Important: "date" and "time" are validated against the plugin's "formatSubmit";
                -> min: [number] (optional) minimun length; if the value returned by the field is an object, this parameter is referred to
                   the number of its properties;
                   setting min to 1 on a boolean field (ex. checkbox) is interpreted as "field required";
                   any other value is ignored for those kind of fields;
                -> max: [number] (optional) maximum length; if the value returned by the field is an object, this parameter is referred to
                   the number of its properties;
                   on input fields this will automatically set the "maxLength" property on the html <input> tag;
                -> unique: [boolean] (optional) specifies that field's value should be unique;

style  -> [string] (optional) wrapper css class for custom styling of the field;



DISPLAYING INLINE:
------------------
It is possible to display fields in the same "row" div by wrapping them into an object in the schema; that object must have this schema:

skeleformGroup   -> [boolean] (mandatory) indicates that the object represents a group of inline fields (true is the only value possible);
fields           -> [array] (optional) the normal schema of the fields to be injected in the same "row" div;


===================================================================
|||                     ABOUT VALIDATION                        |||
===================================================================
Every field should implement this methods:
- i18n(currentLang)   -> [function] (optional) special handling required for i18n on the field; it receives the "currentLang" as a parameter;
- getValue()          -> [function] (mandatory) must return the value of the field (formatted and ready to be saved in the db);
                         normally this is done by calling "Skeleform.validate.checkOptions()" form this method;
- isValid()           -> [function] (mandatory) must perform validation on the field's value; it is called by skeleform before gathering values to be
                         saved in the db;
- setValue(value)     -> [function] (mandatory) receives the current unformatted field value and must format it to be displayed (if required) and set
                         it on the proper DOM element of the field;

Inside these methods (and everywhere in the field's code) calling "$getFieldId(templateInstance, schema)" is the preferred way to get the jQuery object
wrapping the DOM of the main field's input element.


===================================================================
|||                     ABOUT VALIDATION                        |||
===================================================================
The method isValid should perform the field's validation when required and return a "result" object with this form:
    result {
        valid: [boolean] if the field's current value is valid or not
        reasons: [array of strings] a set of strings describing the validity checks failed (should match the name of validation types)
    }
The "Skeleform.validate.checkOptions()" global function is the standard way to perform validity check; it implements all needed type, length and unicity checks;

CUSTOM INVALID MESSAGE
If it's necessary to use a custom invalid message it is possible to add the field "invalidMessages" to the "result" object; "invalidMessages" [object] should be a dictionary of custom i18n strings to use for each validation type.







===================================================================
|||                      TROUBLESHOOTING                        |||
===================================================================
Experimenting errors in your form? Try the followings:

- double check that every field has a different "name" property; different fields with the same name can lead to errors and anyway your data will be incomplete in this case.
- double check your schema structure and that you have included all required keys for every form and field objects.

- contact the project's master ;)


 __                __         __                __         __                __         __                __         __                __
|  \______________/  |       |  \______________/  |       |  \______________/  |       |  \______________/  |       |  \______________/  |
 >  ______________  <         >  ______________  <         >  ______________  <         >  ______________  <         >  ______________  <
|__/              \__|       |__/              \__|       |__/              \__|       |__/              \__|       |__/              \__|
